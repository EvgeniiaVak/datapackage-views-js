{"version":3,"sources":["utils.js","Table.js","Map.js","Document.js","Chart.js","App.js","index.js"],"names":["getLonLat","row","fields","map","field","i","numeric","toString","match","val","isNaN","tableToGeoData","view","spec","resources","schema","geoData","type","features","_values","forEach","data","feature","geometryFieldNames","geometryField","find","includes","name","toLowerCase","getGeometryFromRecord","geometry","coordinates","properties","lonField","latField","e","console","warn","geopointField","format","split","item","trim","latitudeFieldNames","longitudeFieldNames","infobox","eval","push","length","value","JSON","parse","parts","replace","lat","parseCoordinateString","lon","parseFloat","constructor","lng","coord","dms","deg","m","toDeg","Table","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateData","newData","setState","getFieldObject","state","assign","_this2","react_default","a","createElement","es","columns","keys","key","Header","title","accessor","Cell","className","getTheadThProps","style","wordWrap","whiteSpace","showPagination","React","Component","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","src_Map_0","bounds","geoJSON","getBounds","process","JEST_WORKER_ID","center","getCenter","Map","zoom","width","height","TileLayer","attribution","url","GeoJSON","onEachFeature","layer","bindPopup","PdfViewer","_useState","useState","_useState2","slicedToArray","page","setPage","_useState3","_useState4","pages","setPages","canvasEl","useRef","_usePdf","usePdf","file","_usePdf2","loading","numPages","useEffect","ref","previousButton","onClick","href","nextButton","renderPagination","Chart","Plot","createPlotlyComponent","Plotly","config","displaylogo","DataView","react_loader_spinner_default","color","countViews","datapackage","views","specType","getResourceCachedValues","Table_Table","Document","path","plotlySpec","simpleToPlotly","plotlyToPlotly","vegaSpec","vegaToVega","react_vega_min_default","src","page_url","unavailable","__webpack_require__","d","__webpack_exports__","window","DatapackageView"],"mappings":"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","file":"static/js/main.5f387688.chunk.js","sourcesContent":["function getLonLat(row, fields) {\n  return fields.map((field, i) => {\n    // strip trailing non-numeric characters such as deg, n, ...\n    const numeric = row[field].toString().match(/[-+]?[0-9]*\\.?[0-9]*/)\n    if (numeric) {\n      // now match valid lon or lat\n      const val = numeric[0].toString().match(/^[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?)$|^[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+))$/)\n      if (val) {\n        if (isNaN(val[0])) throw 'Invalid lon/lat values'\n        return val[0]\n      } else {\n        throw \"Invalid lon/lat values\"\n      }\n    } else {\n      throw \"Invalid lon/lat values\"\n    }\n  })\n}\n\nfunction tableToGeoData(view) {\n\n  view.spec = view.spec || {}\n  view.resources[0].schema = view.resources[0].schema || {fields: []}\n  // Return object template:\n  const geoData = {\n    type: 'FeatureCollection',\n    features: []\n  }\n\n  if (view.resources[0]._values) {\n    view.resources[0]._values.forEach(data => {\n      let feature\n      // If geometry field exists, parse and use it:\n      const geometryFieldNames = ['geojson', 'geom','the_geom','geometry','spatial','location', 'geo', 'lonlat']\n      const geometryField = view.resources[0].schema.fields.find(field => {\n        return geometryFieldNames.includes(field.name.toLowerCase())\n      })\n      if (geometryField) {\n        feature = getGeometryFromRecord(data[geometryField.name])\n      } else {\n        // Add features based on spec:\n        feature = {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: []\n          },\n          properties: {\n            name: ''\n          }\n        }\n        // If lon and lat fields provided, just use it:\n        if (view.spec.lonField && view.spec.latField) {\n          try {\n            feature.geometry.coordinates = getLonLat(data, [view.spec.lonField, view.spec.latField])\n          } catch (e) {\n            // warn and skip this row if invalid\n            console.warn(e)\n            return\n          }\n        } else {\n          // Identify geopoint field based on tableschema\n          const geopointField = view.resources[0].schema.fields.find(field => {\n            return field.type === 'geopoint'\n          })\n          if (geopointField) { // geopoint field is given in tableschema\n            if (geopointField.format === 'default') {\n              // Value is a comma separated string, eg, \"lon, lat\"\n              feature.geometry.coordinates = data[geopointField.name]\n                .split(',')\n                .map(item => item.trim())\n            } else if (geopointField.format === 'array') {\n              feature.geometry.coordinates = data[geopointField.name]\n            } else if (geopointField.format === 'object') {\n              feature.geometry.coordinates = [\n                data[geopointField.name]['lon'],\n                data[geopointField.name]['lat']\n              ]\n            }\n          } else { // now check for default fields\n            const latitudeFieldNames = ['lat','latitude']\n            const longitudeFieldNames = ['lon','longitude']\n            const latField = view.resources[0].schema.fields.find(field => {\n              return latitudeFieldNames.includes(field.name.toLowerCase())\n            })\n            const lonField = view.resources[0].schema.fields.find(field => {\n              return longitudeFieldNames.includes(field.name.toLowerCase())\n            })\n            if (latField && lonField) {\n              feature.geometry.coordinates = [data[lonField.name], data[latField.name]]\n            } else {\n              // No geodata found:\n              throw 'No geo data found'\n            }\n          }\n        }\n        if (view.spec.infobox) {\n          feature.properties.name = eval('`' + view.spec.infobox + '`')\n        }\n      }\n\n      geoData.features.push(feature)\n    })\n  }\n\n  if (geoData.features.length === 0) throw \"No geodata on resource\"\n\n  return geoData\n}\n\nfunction getGeometryFromRecord(value) {\n  if (typeof(value) === 'string'){\n    // We *may* have a GeoJSON string representation\n    try {\n      value = JSON.parse(value);\n    } catch(e) {}\n  }\n  if (typeof(value) === 'string') {\n    value = value.replace('(', '').replace(')', '');\n    var parts = value.split(',');\n    var lat = parseCoordinateString(parts[0]);\n    var lon = parseCoordinateString(parts[1]);\n\n    if (!isNaN(lon) && !isNaN(parseFloat(lat))) {\n      return {\n        \"type\": \"Point\",\n        \"coordinates\": [lon, lat]\n      };\n    } else {\n      return null;\n    }\n  } else if (value && value.constructor.name === 'Array') {\n    // [ lon, lat ]\n    return {\n      \"type\": \"Point\",\n      \"coordinates\": [value[0], value[1]]\n    };\n  } else if (value && value.lat) {\n    // of form { lat: ..., lon: ...}\n    return {\n      \"type\": \"Point\",\n      \"coordinates\": [value.lon || value.lng, value.lat]\n    };\n  }\n  // We o/w assume that contents of the field are a valid GeoJSON object\n  return value;\n}\n\nfunction parseCoordinateString(coord){\n  if (typeof(coord) != 'string') {\n    return(parseFloat(coord));\n  }\n  var dms = coord.split(/[^-?\\.\\d\\w]+/);\n  var deg = 0; var m = 0;\n  var toDeg = [1, 60, 3600]; // conversion factors for Deg, min, sec\n  var i;\n  for (i = 0; i < dms.length; ++i) {\n      if (isNaN(parseFloat(dms[i]))) {\n        continue;\n      }\n      deg += parseFloat(dms[i]) / toDeg[m];\n      m += 1;\n  }\n  if (coord.match(/[SW]/)) {\n        deg = -1*deg;\n  }\n  return(deg);\n}\n\n\nexport default tableToGeoData;\n","import React from \"react\"\nimport ReactTable from 'react-table-v6'\nimport 'react-table-v6/react-table.css'\nimport { CSVLink } from \"react-csv\"\n\n\nexport default class Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: this.props.data,\n      schema: Object.assign({}, this.props.schema)\n    };\n  }\n\n  updateData = (newData) => {\n    this.setState({\n      data: newData\n    })\n  }\n\n  getFieldObject = (name) => {\n    return this.state.schema.fields\n      ? this.state.schema.fields.find(field => field.name === name)\n      : null\n  }\n\n  render() {\n    return (\n      <ReactTable\n        data={this.state.data}\n        columns={Object.keys(this.state.data[0]).map(key => {\n          return {\n            Header: this.getFieldObject(key)\n              ? (this.getFieldObject(key).title || key)\n              : key,\n            accessor: key,\n            Cell: props => <div className={\n              this.getFieldObject(key)\n                ? this.getFieldObject(key).type\n                : ''}>\n              <span>{props.value}</span>\n            </div>\n          }\n        })}\n        getTheadThProps={() => {\n          return {style: {\"wordWrap\": \"break-word\", \"whiteSpace\": \"initial\"}}\n        }}\n        showPagination={false}\n      />\n    )\n  }\n}\n","import React from 'react'\nimport L from 'leaflet'\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet'\nimport \"./Map.css\"\n\n\n// Following is the fix for invalid leaflet assets. Please, check this issue\n// for details - https://github.com/Leaflet/Leaflet/issues/4968\ndelete L.Icon.Default.prototype._getIconUrl\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n})\n\nexport default function(props) {\n  const geojson = L.geoJSON(props.data)\n  // Find the bound of the geojson returnup LatLngBounds\n  const bounds = geojson.getBounds()\n  // If single feature is given we just set center and zoom properties.\n  // Or if running in JSDOM, we need to avoid using 'bounds' property of leaflet\n  // which causes the tests to crash.\n  if (!props.data.features || props.data.features.length < 2 || process.env.JEST_WORKER_ID) {\n    // Find the center of the LatLngBounds returns LatLng\n    let center = bounds.getCenter()\n    center = [center.lat, center.lng]\n    return (\n      <Map center={center} zoom={10} style={{width: '100%', height: 450}}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n      <GeoJSON\n        data={props.data}\n        onEachFeature={onEachFeature} />\n      </Map>\n    )\n  }\n\n  return (\n    <Map bounds={bounds} style={{width: '100%', height: 450}}>\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n    <GeoJSON\n      data={props.data}\n      onEachFeature={onEachFeature} />\n    </Map>\n  )\n}\n\nfunction onEachFeature(feature, layer) {\n  if (feature.properties && feature.properties.name) {\n    layer.bindPopup(feature.properties.name);\n  }\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport { usePdf } from 'react-pdf-js';\n\nconst PdfViewer = (props) => {\n  const [page, setPage] = useState(1);\n  const [pages, setPages] = useState(null);\n\n  const renderPagination = (page, pages) => {\n    if (!pages) {\n      return null;\n    }\n    let previousButton = <li className=\"previous\" onClick={() => setPage(page - 1)}><a href=\"#previous\"><i className=\"arrow-left\"></i> Previous</a></li>;\n    if (page === 1) {\n      previousButton = <li className=\"previous disabled\"><a href=\"#previous\"><i className=\"arrow-left\"></i> Previous</a></li>;\n    }\n    let nextButton = <li className=\"next\" onClick={() => setPage(page + 1)}><a href=\"#next\">Next <i className=\"arrow-right\"></i></a></li>;\n    if (page === pages) {\n      nextButton = <li className=\"next disabled\"><a href=\"#next\">Next <i className=\"arrow-right\"></i></a></li>;\n    }\n    return (\n      <nav>\n        <ul className=\"pager\">\n          {previousButton}\n          {nextButton}\n        </ul>\n      </nav>\n    );\n  }\n\n  const canvasEl = useRef(null);\n\n  const [loading, numPages] = usePdf({\n    file: props.file,\n    page,\n    canvasEl\n  });\n\n  useEffect(() => {\n    setPages(numPages);\n  }, [numPages]);\n\n  return (\n    <div>\n      {loading && <span>Loading...</span>}\n      <canvas ref={canvasEl} />\n      {renderPagination(page, pages)}\n    </div>\n  );\n}\n\nexport default PdfViewer;\n","import React from 'react';\nimport Plotly from 'plotly.js-basic-dist';\nimport createPlotlyComponent from \"react-plotly.js/factory\";\n\n\nexport default function (props) {\n  const Plot = createPlotlyComponent(Plotly);\n\n  // removes produced with plotly logo by default\n  if (!props.spec.config || !props.spec.config.displaylogo) {\n    props.spec.config = Object.assign(props.spec.config || {}, {displaylogo: false});\n  }\n\n  return (\n    <Plot {...props.spec}/>\n  )\n}\n","import React from \"react\"\nimport Vega from 'react-vega';\nimport './index.css'\nimport \"./App.css\"\nimport Table from \"./Table.js\"\nimport Map from './Map.js'\nimport PdfViewer from './Document.js'\nimport Chart from './Chart.js'\nimport {getResourceCachedValues, simpleToPlotly, plotlyToPlotly, vegaToVega} from 'datapackage-render'\nimport Loader from 'react-loader-spinner'\nimport tableToGeoData from './utils'\n\nexport function DataView(props) {\n  if (props.loading) {\n    return (\n      <div className=\"App\">\n        <Loader\n           type=\"Grid\"\n           color=\"#D3D3D3\"\n           height=\"50\"\n           width=\"50\"\n        />\n      </div>\n    )\n  }\n  const countViews = props.datapackage.views ? props.datapackage.views.length : 0\n  if (countViews === 0) {\n    return (<div className=\"App\">No views available</div>)\n  }\n  for (let i = 0; i < countViews; i++) {\n    const view = props.datapackage.views[i]\n    if (!view.resources[0]._values && view.resources[0].data) {\n      view.resources[0]._values = view.resources[0].data\n    }\n    if (view.specType === 'table' && view.resources[0]._values) {\n      const data = getResourceCachedValues(view.resources[0], true)\n      const schema = view.resources[0].schema || {}\n      return (\n        <div className=\"App\">\n          <Table data={data} schema={schema} />\n        </div>\n      )\n    } else if (view.specType === 'map' && view.resources[0]._values) {\n      return (\n        <div className=\"App\">\n          <Map data={view.resources[0]._values} />\n        </div>\n      )\n    } else if (view.specType === 'tabularmap' && view.resources[0]._values) {\n      let geoData\n      try {\n        geoData = tableToGeoData(view)\n        return (\n          <div className=\"App\">\n            <Map data={geoData} />\n          </div>\n        )\n      } catch (e) {\n        return (<div className={e}></div>)\n      }\n    } else if (view.specType === 'document') {\n      return (\n        <div className=\"App\">\n          <PdfViewer file={view.resources[0].path} />\n        </div>\n      )\n    } else if (view.specType === 'simple') {\n      let plotlySpec\n      try {\n        plotlySpec = simpleToPlotly(view)\n        if (plotlySpec) {\n          return (\n            <div className=\"App\">\n              <Chart spec={plotlySpec} />\n            </div>\n          )\n        }\n      } catch (e) {\n        return (<div className={e}></div>)\n      }\n    } else if (view.specType === 'plotly') {\n      let plotlySpec\n      try {\n        plotlySpec = plotlyToPlotly(view)\n        if (plotlySpec) {\n          return (\n              <div className=\"App\">\n                <Chart spec={plotlySpec} />\n              </div>\n          )\n        }\n      } catch (e) {\n        return (<div className={e}></div>)\n      }\n    } else if (view.specType === 'vega') {\n      let vegaSpec\n      try {\n        vegaSpec = vegaToVega(view)\n        return (\n          <Vega spec={vegaSpec} />\n        )\n      } catch (e) {\n        return (<div className={e}></div>)\n      }\n    } else if (view.specType === 'web') {\n      const src = view.page_url || view.resources[0].path\n      return (\n        <div className=\"App\">\n          <iframe src={src} width=\"100%\" height=\"475px\">\n            Your browser doesn't support \"iframe\".\n          </iframe>\n        </div>\n      )\n    } else if (view.resources[0].unavailable || view.specType === 'unsupported') {\n      return (\n        <div className=\"App\">\n          <p>Data view unavailable.</p>\n          <a href={view.resources[0].path} className=\"text-primary font-bold\">Download the data.</a>\n        </div>\n      )\n    }\n  }\n}\n","import { DataView } from \"./App\";\n\nwindow.DatapackageView = DataView;\n\nexport { DataView }\n"],"sourceRoot":""}